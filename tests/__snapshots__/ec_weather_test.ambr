# serializer version: 1
# name: test_weather_retrieved_weather_updates_ok
  ECWeather(
    alerts=dict({
      'advisories': dict({
        'label': 'Advisories',
        'value': list([
          dict({
            'date': 'Wednesday February 05, 2025 at 18:07 EST',
            'title': 'Weather Advisory',
          }),
        ]),
      }),
      'endings': dict({
        'label': 'Endings',
        'value': list([
        ]),
      }),
      'statements': dict({
        'label': 'Statements',
        'value': list([
        ]),
      }),
      'warnings': dict({
        'label': 'Warnings',
        'value': list([
        ]),
      }),
      'watches': dict({
        'label': 'Watches',
        'value': list([
        ]),
      }),
    }),
    conditions=dict({
      'condition': dict({
        'label': 'Condition',
        'value': 'Mainly Clear',
      }),
      'dewpoint': dict({
        'label': 'Dew Point',
        'unit': 'C',
        'value': -21.1,
      }),
      'high_temp': dict({
        'label': 'High Temperature',
        'unit': 'C',
        'value': -4,
      }),
      'humidex': dict({
        'label': 'Humidex',
        'value': None,
      }),
      'humidity': dict({
        'label': 'Humidity',
        'unit': '%',
        'value': 53,
      }),
      'icon_code': dict({
        'label': 'Icon Code',
        'value': '31',
      }),
      'low_temp': dict({
        'label': 'Low Temperature',
        'unit': 'C',
        'value': -19,
      }),
      'normal_high': dict({
        'label': 'Normal High Temperature',
        'unit': 'C',
        'value': -5,
      }),
      'normal_low': dict({
        'label': 'Normal Low Temperature',
        'unit': 'C',
        'value': -14,
      }),
      'observationTime': dict({
        'label': 'Observation Time',
        'value': FakeDatetime(2025, 2, 5, 23, 0, tzinfo=tzutc()),
      }),
      'pop': dict({
        'label': 'Chance of Precip.',
        'value': None,
      }),
      'pressure': dict({
        'label': 'Pressure',
        'unit': 'kPa',
        'value': 103.0,
      }),
      'sunrise': dict({
        'label': 'Sunrise',
        'value': FakeDatetime(2025, 2, 5, 12, 19, tzinfo=tzutc()),
      }),
      'sunset': dict({
        'label': 'Sunset',
        'value': FakeDatetime(2025, 2, 5, 22, 15, tzinfo=tzutc()),
      }),
      'temperature': dict({
        'label': 'Temperature',
        'unit': 'C',
        'value': -13.6,
      }),
      'tendency': dict({
        'label': 'Tendency',
        'unit': 'kPa',
        'value': 'falling',
      }),
      'text_summary': dict({
        'label': 'Forecast',
        'value': 'Tonight. Clear. Becoming partly cloudy after midnight. Wind up to 15 km/h. Low minus 19. Wind chill near minus 26.',
      }),
      'uv_index': dict({
        'label': 'UV Index',
        'value': 1,
      }),
      'visibility': dict({
        'label': 'Visibility',
        'unit': 'km',
        'value': 24.1,
      }),
      'wind_bearing': dict({
        'label': 'Wind Bearing',
        'unit': 'degrees',
        'value': 142,
      }),
      'wind_chill': dict({
        'label': 'Wind Chill',
        'value': -18,
      }),
      'wind_dir': dict({
        'label': 'Wind Direction',
        'value': 'SE',
      }),
      'wind_gust': dict({
        'label': 'Wind Gust',
        'value': None,
      }),
      'wind_speed': dict({
        'label': 'Wind Speed',
        'unit': 'km/h',
        'value': 7,
      }),
    }),
    daily_forecasts=list([
      dict({
        'icon_code': '31',
        'period': 'Wednesday night',
        'precip_probability': 0,
        'temperature': -19,
        'temperature_class': 'low',
        'text_summary': 'Clear. Becoming partly cloudy after midnight. Wind up to 15 km/h. Low minus 19. Wind chill near minus 26.',
        'timestamp': FakeDatetime(2025, 2, 5, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '17',
        'period': 'Thursday',
        'precip_probability': 0,
        'temperature': -4,
        'temperature_class': 'high',
        'text_summary': 'Cloudy. Snow beginning in the morning. Risk of freezing drizzle late in the afternoon. Amount 5 to 10 cm. Wind up to 15 km/h. High minus 4. Wind chill minus 24 in the morning and minus 10 in the afternoon. UV index 1 or low.',
        'timestamp': FakeDatetime(2025, 2, 6, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '38',
        'period': 'Thursday night',
        'precip_probability': 60,
        'temperature': -7,
        'temperature_class': 'low',
        'text_summary': 'Snow ending early in the evening then mainly cloudy with 60 percent chance of flurries. Risk of freezing drizzle early in the evening. Risk of snow squalls overnight. Wind becoming west 30 km/h gusting to 50 in the evening. Low minus 7. Wind chill minus 8 in the evening and minus 16 overnight.',
        'timestamp': FakeDatetime(2025, 2, 6, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '08',
        'period': 'Friday',
        'precip_probability': 40,
        'temperature': -3,
        'temperature_class': 'high',
        'text_summary': 'A mix of sun and cloud with 40 percent chance of flurries. Windy. High minus 3.',
        'timestamp': FakeDatetime(2025, 2, 7, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '38',
        'period': 'Friday night',
        'precip_probability': 30,
        'temperature': -12,
        'temperature_class': 'low',
        'text_summary': 'Cloudy periods with 30 percent chance of flurries. Low minus 12.',
        'timestamp': FakeDatetime(2025, 2, 7, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '00',
        'period': 'Saturday',
        'precip_probability': 0,
        'temperature': -5,
        'temperature_class': 'high',
        'text_summary': 'Sunny. High minus 5.',
        'timestamp': FakeDatetime(2025, 2, 8, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '17',
        'period': 'Saturday night',
        'precip_probability': 0,
        'temperature': -10,
        'temperature_class': 'low',
        'text_summary': 'Snow. Low minus 10.',
        'timestamp': FakeDatetime(2025, 2, 8, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '16',
        'period': 'Sunday',
        'precip_probability': 0,
        'temperature': -4,
        'temperature_class': 'high',
        'text_summary': 'Periods of snow. High minus 4.',
        'timestamp': FakeDatetime(2025, 2, 9, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '32',
        'period': 'Sunday night',
        'precip_probability': 0,
        'temperature': -18,
        'temperature_class': 'low',
        'text_summary': 'Cloudy periods. Low minus 18.',
        'timestamp': FakeDatetime(2025, 2, 9, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '02',
        'period': 'Monday',
        'precip_probability': 0,
        'temperature': -8,
        'temperature_class': 'high',
        'text_summary': 'A mix of sun and cloud. High minus 8.',
        'timestamp': FakeDatetime(2025, 2, 10, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '32',
        'period': 'Monday night',
        'precip_probability': 0,
        'temperature': -15,
        'temperature_class': 'low',
        'text_summary': 'Cloudy periods. Low minus 15.',
        'timestamp': FakeDatetime(2025, 2, 10, 21, 40, tzinfo=tzutc()),
      }),
      dict({
        'icon_code': '02',
        'period': 'Tuesday',
        'precip_probability': 0,
        'temperature': -7,
        'temperature_class': 'high',
        'text_summary': 'A mix of sun and cloud. High minus 7.',
        'timestamp': FakeDatetime(2025, 2, 11, 21, 40, tzinfo=tzutc()),
      }),
    ]),
    forecast_time=FakeDatetime(2025, 2, 5, 21, 40, tzinfo=tzutc()),
    hourly_forecasts=list([
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 0, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -16,
        'wind_direction': 'S',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 1, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -17,
        'wind_direction': 'S',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 2, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -18,
        'wind_direction': 'S',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 3, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -19,
        'wind_direction': 'S',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 4, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -19,
        'wind_direction': 'S',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 5, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -19,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Clear',
        'icon_code': '30',
        'period': FakeDatetime(2025, 2, 6, 6, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -19,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'A few clouds',
        'icon_code': '31',
        'period': FakeDatetime(2025, 2, 6, 7, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -19,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'A few clouds',
        'icon_code': '31',
        'period': FakeDatetime(2025, 2, 6, 8, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -18,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'A few clouds',
        'icon_code': '31',
        'period': FakeDatetime(2025, 2, 6, 9, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -18,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Partly cloudy',
        'icon_code': '32',
        'period': FakeDatetime(2025, 2, 6, 10, 0, tzinfo=tzutc()),
        'precip_probability': 0,
        'temperature': -18,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Mainly cloudy',
        'icon_code': '33',
        'period': FakeDatetime(2025, 2, 6, 11, 0, tzinfo=tzutc()),
        'precip_probability': 20,
        'temperature': -17,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Cloudy',
        'icon_code': '10',
        'period': FakeDatetime(2025, 2, 6, 12, 0, tzinfo=tzutc()),
        'precip_probability': 20,
        'temperature': -17,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Cloudy',
        'icon_code': '10',
        'period': FakeDatetime(2025, 2, 6, 13, 0, tzinfo=tzutc()),
        'precip_probability': 20,
        'temperature': -16,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Cloudy',
        'icon_code': '10',
        'period': FakeDatetime(2025, 2, 6, 14, 0, tzinfo=tzutc()),
        'precip_probability': 20,
        'temperature': -16,
        'wind_direction': 'E',
        'wind_speed': 10,
      }),
      dict({
        'condition': 'Snow',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 15, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -15,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 16, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -14,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 17, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -13,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 18, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -12,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 19, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -11,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow. Risk of freezing drizzle',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 20, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -9,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow. Risk of freezing drizzle',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 21, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -8,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow. Risk of freezing drizzle',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 22, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -7,
        'wind_direction': 'E',
        'wind_speed': 15,
      }),
      dict({
        'condition': 'Snow. Risk of freezing drizzle',
        'icon_code': '17',
        'period': FakeDatetime(2025, 2, 6, 23, 0, tzinfo=tzutc()),
        'precip_probability': 100,
        'temperature': -5,
        'wind_direction': 'SW',
        'wind_speed': 10,
      }),
    ]),
    language='english',
    lat=45.33,
    lon=-75.58,
    max_data_age=2,
    metadata=MetaData(attribution='Data provided by Environment Canada', timestamp=FakeDatetime(2025, 2, 5, 23, 8, 27, tzinfo=tzutc()), station="Ottawa Macdonald-Cartier Int'l Airport", location='Ottawa (Kanata - Orléans)', cache_returned_on_update=0, last_update_error=''),
    site_list=list([
      dict({
        'Codes': 's0000001',
        'English Names': 'Athabasca',
        'Latitude': 54.72,
        'Longitude': -113.28,
        'Province Codes': 'AB',
      }),
      dict({
        'Codes': 's0000002',
        'English Names': 'Clearwater',
        'Latitude': 51.65,
        'Longitude': -120.03,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000003',
        'English Names': 'Valemount',
        'Latitude': 52.83,
        'Longitude': -119.25,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000004',
        'English Names': 'Grand Forks',
        'Latitude': 49.03,
        'Longitude': -118.43,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000005',
        'English Names': 'McBride',
        'Latitude': 53.3,
        'Longitude': -120.17,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000006',
        'English Names': 'Merritt',
        'Latitude': 50.11,
        'Longitude': -120.79,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000007',
        'English Names': 'Masset',
        'Latitude': 54.02,
        'Longitude': -132.1,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000008',
        'English Names': 'Invermere',
        'Latitude': 50.52,
        'Longitude': -116.03,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000009',
        'English Names': 'Dome Creek',
        'Latitude': 53.75,
        'Longitude': -121.03,
        'Province Codes': 'BC',
      }),
      dict({
        'Codes': 's0000010',
        'English Names': 'Little Grand Rapids',
        'Latitude': 52.04,
        'Longitude': -95.46,
        'Province Codes': 'MB',
      }),
      dict({
        'Codes': 's0000430',
        'English Names': 'Ottawa (Kanata - Orléans)',
        'Latitude': 45.33,
        'Longitude': -75.58,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000431',
        'English Names': 'Leamington',
        'Latitude': 42.1,
        'Longitude': -82.56,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000432',
        'English Names': 'Ulukhaktok',
        'Latitude': 70.73,
        'Longitude': -117.75,
        'Province Codes': 'NT',
      }),
      dict({
        'Codes': 's0000433',
        'English Names': 'Ingonish',
        'Latitude': 46.69,
        'Longitude': -60.37,
        'Province Codes': 'NS',
      }),
      dict({
        'Codes': 's0000434',
        'English Names': 'Smiths Falls',
        'Latitude': 44.9,
        'Longitude': -76.02,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000435',
        'English Names': 'Sharbot Lake',
        'Latitude': 44.77,
        'Longitude': -76.69,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000436',
        'English Names': 'Kemptville',
        'Latitude': 45.02,
        'Longitude': -75.64,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000437',
        'English Names': 'Kirkland Lake',
        'Latitude': 48.15,
        'Longitude': -80.03,
        'Province Codes': 'ON',
      }),
      dict({
        'Codes': 's0000438',
        'English Names': 'Windsor',
        'Latitude': 44.99,
        'Longitude': -64.14,
        'Province Codes': 'NS',
      }),
      dict({
        'Codes': 's0000439',
        'English Names': 'Kentville',
        'Latitude': 45.08,
        'Longitude': -64.5,
        'Province Codes': 'NS',
      }),
      dict({
        'Codes': 's0000440',
        'English Names': 'Lunenburg',
        'Latitude': 44.38,
        'Longitude': -64.31,
        'Province Codes': 'NS',
      }),
    ]),
    station_id=tuple(
      'ON',
      '430',
    ),
  )
# ---
